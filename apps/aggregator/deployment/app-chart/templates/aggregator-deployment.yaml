apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "astro-aggregator.fullname" . }}
  labels:
    {{- include "astro-aggregator.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "astro-aggregator.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "astro-aggregator.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "astro-aggregator.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.container.internalPort }}
              protocol: TCP
          # TODO: Since we moved to TCP for aggregator microservice - need to use another apprroach for liveness probe
          # livenessProbe:
          #   httpGet:
          #     path: "{{ .Values.container.livenessProbe.path }}"
          #     port: {{ .Values.container.livenessProbe.port }}
          #     scheme: HTTP
          #   initialDelaySeconds: {{ .Values.container.livenessProbe.initialDelaySeconds }}
          #   periodSeconds: {{ .Values.container.livenessProbe.periodSeconds }}
          #   timeoutSeconds: {{ .Values.container.livenessProbe.timeoutSeconds }}
          #   successThreshold: {{ .Values.container.livenessProbe.successThreshold }}
          #   failureThreshold: {{ .Values.container.livenessProbe.failureThreshold }}
          # readinessProbe:
          #   httpGet:
          #     path: "{{ .Values.container.readinessProbe.path }}"
          #     port: {{ .Values.container.readinessProbe.port }}
          #     scheme: HTTP
          #   initialDelaySeconds: {{ .Values.container.readinessProbe.initialDelaySeconds }}
          #   periodSeconds: {{ .Values.container.readinessProbe.periodSeconds }}
          #   timeoutSeconds: {{ .Values.container.readinessProbe.timeoutSeconds }}
          #   successThreshold: {{ .Values.container.readinessProbe.successThreshold }}
          #   failureThreshold: {{ .Values.container.readinessProbe.failureThreshold }}
          envFrom:
          - configMapRef:
              name: astro-configmap
          - configMapRef:
              name: astro-aggregator-configmap
          - configMapRef:
              name: {{ .Release.Name }}-version
          - secretRef:
              name: api-rds-secrets
          - secretRef:
              name: api-redis-secrets
          - secretRef:
              name: api-service-secrets
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
