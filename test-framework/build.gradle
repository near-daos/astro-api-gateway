import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    ext {
        aspectjVersion = '1.9.4'
        springVersion = '5.3.5'
        lombokVersion = '1.18.8'
        allureVersion = '2.17.3'
        junitVersion = '5.8.1'
        assertjVersion = '3.19.0'
        snakeyamlVersion = '1.28'
        jacksonVersion = '2.12.3'
        restAssuredVersion = '4.5.1'
        swaggerCoverageVersion = '1.5.0'
    }
}

plugins {
    id 'java'
    id 'io.qameta.allure' version '2.8.1'
    id 'io.freefair.lombok' version '5.3.3.3'
    id "de.undercouch.download" version "4.1.2"
    id "org.openapi.generator" version "6.0.1"
}

version '1.0'
group = 'api.app.astrodao.com'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

def modelsDir = 'api/app/astrodao/com/openapi/models'
def generatedDir = "$buildDir/generated"
def sourceFolder = 'src/main/java'
def apiServiceConfigurationJson = '/src/main/resources/configs/swaggerCoverageApiServiceConfiguration.json'
def draftServiceConfigurationJson  = '/src/main/resources/configs/swaggerCoverageDraftServiceConfiguration.json'

dependencies {
    implementation "org.aspectj:aspectjweaver:${aspectjVersion}"
    implementation "org.springframework:spring-context:${springVersion}"
    implementation "org.springframework:spring-test:${springVersion}"
    implementation "org.yaml:snakeyaml:${snakeyamlVersion}"
    implementation "org.assertj:assertj-core:${assertjVersion}"
    implementation "com.fasterxml.jackson.module:jackson-module-parameter-names:${jacksonVersion}"
    implementation "com.google.code.gson:gson:2.8.9"
    implementation "org.awaitility:awaitility:4.1.1"

    implementation "io.qameta.allure:allure-java-commons:${allureVersion}"
    implementation "io.qameta.allure:allure-rest-assured:${allureVersion}"
    implementation "io.rest-assured:rest-assured:${restAssuredVersion}"
    implementation "com.github.viclovsky:swagger-coverage-rest-assured:${swaggerCoverageVersion}"
    implementation "io.swagger.core.v3:swagger-models:2.1.11"
    implementation "io.swagger:swagger-models:1.6.3"

    implementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    implementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation "com.github.javafaker:javafaker:1.0.2"
    implementation "org.javatuples:javatuples:1.2"

    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation "com.google.code.findbugs:annotations:3.0.1"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

allure {
    version = "${allureVersion}"
    autoconfigure = true
    aspectjweaver = true
    useJUnit5 {
        version = "${allureVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform {
        includeTags System.getProperty("includeTags", "all")
    }

    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }

    systemProperties['junit.jupiter.execution.parallel.enabled'] = true
    systemProperties['junit.jupiter.execution.parallel.mode.default'] = 'concurrent'
    systemProperties['junit.jupiter.execution.parallel.config.strategy'] = 'fixed'
    systemProperties['junit.jupiter.execution.parallel.config.fixed.parallelism'] = '6'
    systemProperties['allure.results.directory'] = 'build/allure-results'

    environment "TEST_ENV", System.getProperty("test.env", "testnet")
    environment "TEST_AGG_TIMEOUT", System.getProperty("test.agg.timeout", "20")

    doFirst {
        new File(projectDir, "build/allure-results/environment.properties").text =
                """Environment: ${"testnet"}
               Tags: ${System.getProperty("includeTags")}
            """
    }
}

task generateOpenApiModels() {
    dependsOn (
            "downloadSwaggerSpecForApiService",
            "downloadSwaggerSpecForDraftService",
            "openApiModelsConfigForApiService",
            "openApiModelsConfigForDraftService"
    )
}

task openApiModelsConfigForApiService(type: GenerateTask) {
    generatorName = "java"
    validateSpec = false
    inputSpec = "${buildDir}/specForApiService.json"
    outputDir = "$buildDir/generated".toString()
    outputDir = generatedDir
    modelPackage = "$modelsDir".replace('/', '.')
    generateApiTests = false
    generateModelTests = false
    generateApiDocumentation = false
    generateModelDocumentation = false
    configOptions = [
            java11              : "true",
            dateLibrary         : "java8",
            sourceFolder        : "",
            library             : "resttemplate",
            serializationLibrary: "jackson"
    ]

    doLast {
        delete "$rootDir/$sourceFolder/$modelsDir"

        copy {
            from "$generatedDir/$modelsDir"
            into "$rootDir/$sourceFolder/$modelsDir"
        }

        project.logger.lifecycle('Open Api models for API service were generated')
    }
}

task openApiModelsConfigForDraftService(type: GenerateTask) {
    generatorName = "java"
    validateSpec = false
    inputSpec = "${buildDir}/specForDraftService.json"
    outputDir = "$buildDir/generated".toString()
    outputDir = generatedDir
    modelPackage = "$modelsDir".replace('/', '.')
    generateApiTests = false
    generateModelTests = false
    generateApiDocumentation = false
    generateModelDocumentation = false
    configOptions = [
            java11              : "true",
            dateLibrary         : "java8",
            sourceFolder        : "",
            library             : "resttemplate",
            serializationLibrary: "jackson"
    ]

    doLast {
        delete "$rootDir/$sourceFolder/$modelsDir"

        copy {
            from "$generatedDir/$modelsDir"
            into "$rootDir/$sourceFolder/$modelsDir"
        }

        project.logger.lifecycle('Open Api models for Draft service were generated')
    }
}

task downloadSwaggerSpecForApiService(type: Download) {
    src "https://api.testnet.app.astrodao.com/docs-json"
    dest new File("${buildDir}/specForApiService.json")
}

task downloadSwaggerSpecForDraftService(type: Download) {
    src "https://draft.testnet.app.astrodao.com/docs-json"
    dest new File("${buildDir}/specForDraftService.json")
}

task downloadCliForCoverage(type: Download) {
    src "https://github.com/viclovsky/swagger-coverage/releases/download/${swaggerCoverageVersion}/swagger-coverage-${swaggerCoverageVersion}.zip"
    dest new File("${buildDir}/swagger-coverage-commandline.zip")
}

task unzipCoverageCli(type: Copy) {
    dependsOn(
            "downloadCliForCoverage",
            "downloadSwaggerSpecForApiService",
            "downloadSwaggerSpecForDraftService"
    )

    def zipFile = file("${buildDir}/swagger-coverage-commandline.zip")
    def outputDir = file(buildDir)

    from zipTree(zipFile)
    into outputDir

    doLast {
        project.logger.lifecycle('Swagger-coverage-commandline zip file was unpacked')
    }
}

task generateCoverage() {
    dependsOn (
            'generateApiServiceCoverage',
            'generateDraftServiceCoverage'
    )
}

task generateApiServiceCoverage(type: Exec) {
    dependsOn tasks.named("unzipCoverageCli")
    workingDir "${buildDir}/swagger-coverage-commandline-${swaggerCoverageVersion}/bin"

    commandLine './swagger-coverage-commandline', "-s", "../../specForApiService.json", "-i", "../../swagger-coverage-output", "-c", "../../../${apiServiceConfigurationJson}"
}

task generateDraftServiceCoverage(type: Exec) {
    dependsOn tasks.named("unzipCoverageCli")

    workingDir "${buildDir}/swagger-coverage-commandline-${swaggerCoverageVersion}/bin"
    commandLine './swagger-coverage-commandline', "-s", "../../specForDraftService.json", "-i", "../../swagger-coverage-output", "-c", "../../../${draftServiceConfigurationJson}"
}

compileJava.dependsOn tasks.generateOpenApiModels