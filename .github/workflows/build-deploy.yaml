name: Build Deploy All
on:
  workflow_dispatch:
    inputs:
      environment:
        required: false
        description: Specify environment to run on. Valid values are test, production
      apps:
        required: false
        default: aggregator api draft notifier
        description: List of application to build (space separated).
  push:
    branches:
    - develop

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  KUBE_CONFIG_DATA:  ${{ secrets.KUBE_CONFIG_DATA }}
  NOTIFI_SID:  ${{ secrets.NOTIFI_SID }}
  NOTIFI_SECRET:  ${{ secrets.NOTIFI_SECRET }}
  PAGODA_RPC_API_KEY:  ${{ secrets.PAGODA_RPC_API_KEY }}

jobs:
  get-updated-apps:
    name: Get Updated Apps
    runs-on: ubuntu-latest
    outputs:
      updated-apps: ${{ steps.updated-apps.outputs.apps }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - id: updated-apps
      shell: bash
      run: |
        array_to_json () {
          echo "[$(echo $1 | xargs | sed -e 's| |", "|g;s|.*|"&"|')]"
        }

        if [[ "${{ github.event.inputs.apps }}" != "" ]]
        then
          echo "List of apps was provided manually: ${{ github.event.inputs.apps }}"
          export UPDATED_APPS=$(array_to_json "${{ github.event.inputs.apps }}")
          echo "::set-output name=apps::$UPDATED_APPS"
          exit 0
        fi

        echo "::set-output name=apps::[\"aggregator\", \"api\", \"notifier\", \"draft\"]"

  get-environment:
    name: Get Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.get-environment.outputs.environment }}
    steps:
    - name: get environment
      id: get-environment
      shell: bash
      run: |
        if [[ "${{ github.ref }}" =~ ^refs/heads/develop ]]
        then
          echo "::set-output name=environment::test"
        fi
        if [[ "${{ github.event.inputs.environment }}" != "" ]]
        then
          echo "input was provided: ${{ github.event.inputs.environment }}"
          echo "::set-output name=environment::${{ github.event.inputs.environment }}"
        fi

  build-images:
    name: Build Image
    strategy:
      matrix:
        app: ${{ fromJSON(needs.get-updated-apps.outputs.updated-apps) }}
    runs-on: ubuntu-latest
    needs:
    - get-updated-apps
    steps:
    - uses: actions/checkout@v2
    - name: Set Environment
      run: |
        cat ".github/env.common" | grep -E -v '^\ *#' >>$GITHUB_ENV
    - name: Docker Build Publish
      env:
        APP_NAME: ${{ matrix.app }}
      uses: ./.github/actions/docker-build-publish

  helm-deploy:
    name: Helm Deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJSON(needs.get-updated-apps.outputs.updated-apps) }}
    needs:
    - get-updated-apps
    - get-environment
    - build-images
    environment:
      name: ${{ needs.get-environment.outputs.environment }}
    steps:
    - uses: actions/checkout@v2
    - name: Set Environment
      run: |
        cat ".github/env.common" | grep -E -v '^\ *#' >>$GITHUB_ENV
        cat ".github/env.${{ needs.get-environment.outputs.environment }}" | grep -E -v '^\ *#' >>$GITHUB_ENV
    - name: Helm Deploy
      uses: near-daos/github-actions/deploy@v1
      with:
        name: sputnik-v2-${{ matrix.app }}
        namespace: ${{ env.DEPLOYMENT_NAMESPACE }}
        tag: ${{ env.GITHUB_SHA }}
        chart_directory: apps/${{ matrix.app }}/deployment/app-chart

    - name: Tag Previous Image
      uses: tmknom/retag-ecr-action@v1
      with:
        repository-name: sputnik-v2-${{ matrix.app }}
        source-tag: ${{ github.event.inputs.environment }}-current
        destination-tag: ${{ github.event.inputs.environment }}-previous

    - name: Tag Current Image
      uses: tmknom/retag-ecr-action@v1
      with:
        repository-name: sputnik-v2-${{ matrix.app }}
        source-tag: ${{ github.event.inputs.tag }}
        destination-tag: ${{ github.event.inputs.environment }}-current


  # experimental sleep to nail down issue with tests failing after deploy
  wait-for-aggregator:
    name: Wait For Aggregator
    runs-on: ubuntu-latest
    if: needs.get-environment.outputs.environment == 'test'
    needs:
    - helm-deploy
    - get-environment
    steps:
    - name: sleep
      run: |
        sleep 300

  run-autotests:
    name: Run Autotests
    needs:
    - helm-deploy
    - get-environment
    - wait-for-aggregator
    if: needs.get-environment.outputs.environment == 'test'
    uses: near-daos/astro-api-gateway/.github/workflows/run-autotests.yaml@develop
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      NEAR_ACCOUNT_ID: ${{ secrets.NEAR_ACCOUNT_ID }}
      NEAR_PUBLIC_KEY: ${{ secrets.NEAR_PUBLIC_KEY }}
      NEAR_PRIVATE_KEY: ${{ secrets.NEAR_PRIVATE_KEY }}
      KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
