name: 'Docker Build Publish'
runs:
  using: 'composite'
  steps:
  - name: Docker Cache
    uses: actions/cache@v2
    with:
      path: |
        docker-cache.tar
      key: docker

  - name: Load Cache
    shell: bash
    run: |
      if [[ -f "docker-cache/cache.tar" ]]; then
        docker load < docker-cache.tar;
      fi

  - name: Docker meta
    id: meta
    uses: docker/metadata-action@v3
    with:
      images: |
        ${{ env.AWS_ECR_URL }}/sputnik-v2-${{ env.APP_NAME }}
      tags: |
        type=raw,value=latest
        type=raw,value=${{ env.DOCKER_ENV_TAG }}
        type=ref,event=branch,suffix=-latest
        type=sha,prefix=,format=long

  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v1

  - name: Configure AWS credentials
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
      aws-region: ${{ env.AWS_DEFAULT_REGION }}

  - name: Login to ECR
    uses: aws-actions/amazon-ecr-login@v1

  - name: Build And Push
    uses: docker/build-push-action@v2
    with:
      #context: apps/${APP_NAME}
      context: .
      #file: apps/${APP_NAME}/Dockerfile
      file: Dockerfile
      platforms: linux/amd64
      tags: ${{ steps.meta.outputs.tags }}
      push: true
      build-args: APP_NAME=${{ env.APP_NAME }}

  - name: Save Cache
    shell: bash
    run: |
      if [[ ! -f "docker-cache.tar" ]]; then
        docker save $(docker images -qa) > docker-cache.tar;
      fi

